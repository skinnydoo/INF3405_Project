/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab4_inf3405;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;


/**
 *
 * @author Simel
 */
public class SurveyServer extends javax.swing.JFrame implements SurveyFormControlFormatter {

    private ServerSocket server_;
    private PrintWriter outWriter_;
    private List<PrintWriter> clientOutputStreamList_;
    private List<String> clientsList_;
    
    static boolean surveyIsOpen_ = false;
    private static boolean ipAddressOk_ = false;    //Valid IP Address format is 0-255.0-255.0-255.0-255
    
    private static int surveyPortNumber_;
    
    private NumberFormat durationFormat_;
   
    private final List<javax.swing.JFormattedTextField> fieldList_;
   
    /**
     * Creates new form Client
     * Constructor
     */
    public SurveyServer() {
        fieldList_ = new ArrayList<>();
        setFieldFormat();
        initComponents();
        
        fieldList_.add(ipFTextField_);
        fieldList_.add(portNumFTextField_);
        fieldList_.add(durationFTextField_);
        
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkFieldsFull();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkFieldsFull();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                 checkFieldsFull();
            }
        };
        
        // populate document listener for all fields
        for(javax.swing.JFormattedTextField field : fieldList_)
            field.getDocument().addDocumentListener(documentListener);
        
    }
    
    
    /**
     * Set field format
     */
    @Override
    public void setFieldFormat() {
        
        durationFormat_ = NumberFormat.getNumberInstance();
    }
    
    /**
     * Validate port number input
     */
    @Override
    public void validatePortNumber() {
        
        try {
                        
             Object[] options = { "OK", "CANCEL" };
                if ( Integer.parseInt(portNumFTextField_.getText().trim() ) < 10000 || Integer.parseInt(portNumFTextField_.getText().trim() ) > 10050) {
                    JOptionPane.showOptionDialog(serverPanel_, "Port Nnumber Must Be Between 10000 and 10050", "Error",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);                    
                    
                    portNumFTextField_.setValue("");
                }
            }catch (NumberFormatException ex) {
                
                JOptionPane.showMessageDialog(serverPanel_, "Port Number Should Be An Integer", "Error", JOptionPane.ERROR_MESSAGE);
                portNumFTextField_.setValue("");
         
         }
    }
    
    /**
     * Check whether all the field has been filled
     */
    @Override
    public void checkFieldsFull() {
        
        for(javax.swing.JFormattedTextField field : fieldList_) {
            
            if (field.getText().trim().isEmpty()) {
                openSurveyButton_.setEnabled(false);
                sendButton_.setEnabled(false);
                closeSurveyButton_.setEnabled(false);
                
                return;
            }
        }
        
        openSurveyButton_.setEnabled(true);
        sendButton_.setEnabled(true);
        closeSurveyButton_.setEnabled(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverPanel_ = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionTextArea_ = new javax.swing.JTextArea();
        ipLabel_ = new javax.swing.JLabel();
        durationLabel_ = new javax.swing.JLabel();
        sendButton_ = new javax.swing.JButton();
        openSurveyButton_ = new javax.swing.JButton();
        portNumLabel_ = new javax.swing.JLabel();
        closeSurveyButton_ = new javax.swing.JButton();
        remainingLabel_ = new javax.swing.JLabel();
        remOutputLabel_ = new javax.swing.JLabel();
        portNumFTextField_ = new javax.swing.JFormattedTextField();
        ipFTextField_ = new javax.swing.JFormattedTextField();
        durationFTextField_ = new javax.swing.JFormattedTextField(durationFormat_);
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea_ = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverPanel_.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));
        serverPanel_.setName("Server"); // NOI18N

        questionTextArea_.setColumns(20);
        questionTextArea_.setRows(5);
        questionTextArea_.setName("QuestionTextArea"); // NOI18N
        jScrollPane1.setViewportView(questionTextArea_);

        ipLabel_.setText("IP Address:");

        durationLabel_.setText("Duration:");

        sendButton_.setText("SEND");
        sendButton_.setEnabled(false);
        sendButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButton_ActionPerformed(evt);
            }
        });

        openSurveyButton_.setText("OPEN SURVEY");
        openSurveyButton_.setEnabled(false);
        openSurveyButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSurveyButton_ActionPerformed(evt);
            }
        });

        portNumLabel_.setText("Port Number:");

        closeSurveyButton_.setText("CLOSE SURVEY");
        closeSurveyButton_.setEnabled(false);
        closeSurveyButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSurveyButton_ActionPerformed(evt);
            }
        });

        remainingLabel_.setText("Remaining:");

        remOutputLabel_.setText("jLabel4");
        remOutputLabel_.setMinimumSize(new java.awt.Dimension(104, 24));
        remOutputLabel_.setPreferredSize(new java.awt.Dimension(104, 24));

        portNumFTextField_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        portNumFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        portNumFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        portNumFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                portNumFTextField_FocusLost(evt);
            }
        });

        ipFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        ipFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        ipFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ipFTextField_FocusLost(evt);
            }
        });

        durationFTextField_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        durationFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        durationFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        durationFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                durationFTextField_FocusLost(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        outputTextArea_.setColumns(20);
        outputTextArea_.setRows(5);
        jScrollPane2.setViewportView(outputTextArea_);

        javax.swing.GroupLayout serverPanel_Layout = new javax.swing.GroupLayout(serverPanel_);
        serverPanel_.setLayout(serverPanel_Layout);
        serverPanel_Layout.setHorizontalGroup(
            serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanel_Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addComponent(openSurveyButton_)
                        .addGap(18, 18, 18)
                        .addComponent(sendButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeSurveyButton_))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverPanel_Layout.createSequentialGroup()
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addComponent(ipLabel_)
                                .addGap(18, 18, 18)
                                .addComponent(ipFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addComponent(durationLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(durationFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remainingLabel_)
                            .addComponent(portNumLabel_))
                        .addGap(18, 18, 18)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remOutputLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portNumFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeSurveyButton_, openSurveyButton_});

        serverPanel_Layout.setVerticalGroup(
            serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanel_Layout.createSequentialGroup()
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(portNumLabel_))
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portNumFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ipFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ipLabel_))
                                .addGap(20, 20, 20)
                                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(durationFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(durationLabel_)
                                    .addComponent(remainingLabel_)
                                    .addComponent(remOutputLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(closeSurveyButton_)
                                    .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(openSurveyButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sendButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverPanel_Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {durationLabel_, ipLabel_});

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeSurveyButton_, openSurveyButton_, sendButton_});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverPanel_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverPanel_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * @param evt 
     */
    private void portNumFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_portNumFTextField_FocusLost
        
        if( portNumFTextField_.getText().equals("") )
            return;
        
        validatePortNumber();
    }//GEN-LAST:event_portNumFTextField_FocusLost

    private void ipFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ipFTextField_FocusLost
        
        if (ipFTextField_.getText().equals(""))
            return;
             
        ipAddressOk_ = validateIP(ipFTextField_.getText().trim()); // Valid IP Address format is 0-255.0-255.0-255.0-255
        
        if (!ipAddressOk_) {
            
            JOptionPane.showMessageDialog(serverPanel_, "Wrong IP Format", "Error", JOptionPane.ERROR_MESSAGE);
            //ipFTextField_.setValue("");
           
        }
        
        
    }//GEN-LAST:event_ipFTextField_FocusLost

    private void durationFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationFTextField_FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_durationFTextField_FocusLost

    private void closeSurveyButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSurveyButton_ActionPerformed
        
        try {
            
            Thread.sleep(5000);
            
        } catch (InterruptedException e) {
            
            Thread.currentThread().interrupt();
        }
        
        outputTextArea_.append("Server is stopping...\n");        
        surveyIsOpen_= false;
    }//GEN-LAST:event_closeSurveyButton_ActionPerformed

    private void sendButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButton_ActionPerformed
        
       /* String question = questionTextArea_.getText().trim();
        out_.println(question);
        out_.flush();*/
    }//GEN-LAST:event_sendButton_ActionPerformed

    private void openSurveyButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSurveyButton_ActionPerformed
        
        startServer();
        
        outputTextArea_.append("Waiting for clients to connect...\n");
        openSurveyButton_.setEnabled(false);
    }//GEN-LAST:event_openSurveyButton_ActionPerformed
    
    
    /**
     * Start the Server on a different thread
     */
    private void startServer() {
        
         
        
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
          
            @Override
            protected Boolean doInBackground() throws Exception {
                
                surveyPortNumber_ = Integer.parseInt(portNumFTextField_.getText().trim());
                clientOutputStreamList_ = new ArrayList();
                
                try {
                    
                   
                   server_ = new ServerSocket(surveyPortNumber_);
                   surveyIsOpen_ = true;
                                     
                   // should be while time has not elapsed
                    while (true) {                        
                        
                        Socket socket = server_.accept();
                        outputTextArea_.append("Client connected.\n");
                        
                        outWriter_ = new PrintWriter(socket.getOutputStream());
                        clientOutputStreamList_.add(outWriter_);
                        
                        SurveyService service = new SurveyService(socket);
                        Thread t = new Thread(service);
                        t.start();
                    }

                } catch (IOException ex) {
            
                    Logger.getLogger(SurveyServer.class.getName()).log(Level.SEVERE, null, ex);  
                    surveyIsOpen_ = false;
                }
                
                return surveyIsOpen_;
            }

            @Override
            protected void done() {
               
            }

            @Override
            protected void process(List<Void> chunks) {
                
            }

           
        };
        
        worker.execute();
    }

    /**
     * Inner class SurveyService that execute Survey Access Protocol
     * commands from a socket
     */
    private class SurveyService implements Runnable {

        private final Socket socket_;
        private Scanner in_;
        
        /**
         * Construct a service object that processes commands
         * from a socket for a survey
         * @param socket the socket
         * @param survey the survey
         */
        SurveyService(Socket socket) {

            socket_ = socket;
        }

        @Override
        public void run() {

            try {

                in_ = new Scanner(socket_.getInputStream());
                outWriter_ = new PrintWriter(socket_.getOutputStream());
                doService();

            } catch (IOException e) {

                outputTextArea_.append("Unexpedted Error...\n");
                e.printStackTrace();
                
            }

        }

        private void doService() {

            while (true) {            

                if(!in_.hasNext()) 
                    return;

                String answer = in_.next();

                if ( answer.equals("CLOSE"))
                    return;
                else
                    processResponse(answer);

            }

        }

        /**
         * Display message from the client
         * @param answer the client answer
         */
        private void processResponse(String answer) {
            
            String response = outputTextArea_.getText().trim() + "\n" + 
                              socket_.getRemoteSocketAddress().toString() + " : " +
                              socket_.getPort() + " - " + answer;
            
            outputTextArea_.append(response + "\n");
        }
    
    }
    
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SurveyServer().setVisible(true);
        });        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeSurveyButton_;
    private static javax.swing.JFormattedTextField durationFTextField_;
    private javax.swing.JLabel durationLabel_;
    private static javax.swing.JFormattedTextField ipFTextField_;
    private javax.swing.JLabel ipLabel_;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton openSurveyButton_;
    private javax.swing.JTextArea outputTextArea_;
    private static javax.swing.JFormattedTextField portNumFTextField_;
    private javax.swing.JLabel portNumLabel_;
    private javax.swing.JTextArea questionTextArea_;
    private static javax.swing.JLabel remOutputLabel_;
    private javax.swing.JLabel remainingLabel_;
    private javax.swing.JButton sendButton_;
    private javax.swing.JPanel serverPanel_;
    // End of variables declaration//GEN-END:variables

}
