/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab4_inf3405;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;


/**
 *
 * @author Simel
 */
public class SurveyServer extends javax.swing.JFrame implements SurveyFormControlFormatter {

    private ServerSocket server_;
    private List<String> clientsList_;
    Timer timer_;
    int timerCounter_;
    private volatile boolean surveyIsOver_ = false;
    private SwingWorker<Void, Void> worker_;
    
    private static boolean ipAddressOk_ = false;    //Valid IP Address format is 0-255.0-255.0-255.0-255
   
    private final List<javax.swing.JFormattedTextField> fieldList_;
   
    /**
     * Creates new form Client
     * Constructor
     */
    public SurveyServer() {
        fieldList_ = new ArrayList<>();
        initComponents();
        
        fieldList_.add(ipFTextField_);
        fieldList_.add(portNumFTextField_);
        fieldList_.add(durationFTextField_);
        
        
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkFieldsFull();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkFieldsFull();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                 checkFieldsFull();
            }
        };
        
        // populate document listener for all fields
        for(javax.swing.JFormattedTextField field : fieldList_)
            field.getDocument().addDocumentListener(documentListener);
        
        questionTextArea_.getDocument().addDocumentListener(documentListener);
        
    }
    
    
    /**
     * Validate port number input
     */
    @Override
    public void validatePortNumber() {
        
        try {
                        
             Object[] options = { "OK", "CANCEL" };
                if ( Integer.parseInt(portNumFTextField_.getText().trim() ) < 10000 || Integer.parseInt(portNumFTextField_.getText().trim() ) > 10050) {
                    JOptionPane.showOptionDialog(serverPanel_, "Port Nnumber Must Be Between 10000 and 10050", "Error",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);                    
                    
                    portNumFTextField_.setValue("");
                }
            }catch (NumberFormatException ex) {
                
                JOptionPane.showMessageDialog(serverPanel_, "Port Number Should Be An Integer", "Error", JOptionPane.ERROR_MESSAGE);
                portNumFTextField_.setValue("");
         
         }
    }
    
    /**
     * Check whether all the field has been filled
     */
    @Override
    public void checkFieldsFull() {
        
        for(javax.swing.JFormattedTextField field : fieldList_) {
            
            if (field.getText().trim().isEmpty()) {
                openSurveyButton_.setEnabled(false);
                closeSurveyButton_.setEnabled(false);
                
                return;
            }
        }
        
        if ( questionTextArea_.getText().trim().isEmpty() ){
            
            openSurveyButton_.setEnabled(false);
            closeSurveyButton_.setEnabled(false);
                
            return;
        }
          
        
        openSurveyButton_.setEnabled(true);
        closeSurveyButton_.setEnabled(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverPanel_ = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionTextArea_ = new javax.swing.JTextArea();
        ipLabel_ = new javax.swing.JLabel();
        durationLabel_ = new javax.swing.JLabel();
        openSurveyButton_ = new javax.swing.JButton();
        portNumLabel_ = new javax.swing.JLabel();
        closeSurveyButton_ = new javax.swing.JButton();
        remainingLabel_ = new javax.swing.JLabel();
        timerLabel_ = new javax.swing.JLabel();
        portNumFTextField_ = new javax.swing.JFormattedTextField();
        ipFTextField_ = new javax.swing.JFormattedTextField();
        durationFTextField_ = new javax.swing.JFormattedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea_ = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("serverFrame"); // NOI18N

        serverPanel_.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));
        serverPanel_.setFocusCycleRoot(true);
        serverPanel_.setName("Server"); // NOI18N

        questionTextArea_.setColumns(20);
        questionTextArea_.setRows(5);
        questionTextArea_.setTabSize(4);
        questionTextArea_.setName("QuestionTextArea"); // NOI18N
        jScrollPane1.setViewportView(questionTextArea_);

        ipLabel_.setText("IP Address:");

        durationLabel_.setText("Duration:");

        openSurveyButton_.setText("OPEN SURVEY");
        openSurveyButton_.setEnabled(false);
        openSurveyButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSurveyButton_ActionPerformed(evt);
            }
        });

        portNumLabel_.setText("Port Number:");

        closeSurveyButton_.setText("CLOSE SURVEY");
        closeSurveyButton_.setEnabled(false);
        closeSurveyButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSurveyButton_ActionPerformed(evt);
            }
        });

        remainingLabel_.setText("Remaining:");

        timerLabel_.setMinimumSize(new java.awt.Dimension(104, 24));
        timerLabel_.setPreferredSize(new java.awt.Dimension(104, 24));

        portNumFTextField_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        portNumFTextField_.setFocusTraversalPolicy(ipFTextField_.getFocusTraversalPolicy());
        portNumFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        portNumFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        portNumFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                portNumFTextField_FocusLost(evt);
            }
        });

        ipFTextField_.setFocusTraversalPolicy(serverPanel_.getFocusTraversalPolicy());
        ipFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        ipFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        ipFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ipFTextField_FocusLost(evt);
            }
        });

        durationFTextField_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        durationFTextField_.setFocusTraversalPolicy(portNumFTextField_.getFocusTraversalPolicy());
        durationFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        durationFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        durationFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                durationFTextField_FocusLost(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        outputTextArea_.setEditable(false);
        outputTextArea_.setColumns(20);
        outputTextArea_.setRows(5);
        outputTextArea_.setFocusable(false);
        jScrollPane2.setViewportView(outputTextArea_);

        javax.swing.GroupLayout serverPanel_Layout = new javax.swing.GroupLayout(serverPanel_);
        serverPanel_.setLayout(serverPanel_Layout);
        serverPanel_Layout.setHorizontalGroup(
            serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanel_Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addComponent(ipLabel_)
                                .addGap(18, 18, 18)
                                .addComponent(ipFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addComponent(durationLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(durationFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remainingLabel_)
                            .addComponent(portNumLabel_))
                        .addGap(18, 18, 18)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timerLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portNumFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addComponent(openSurveyButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeSurveyButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeSurveyButton_, openSurveyButton_});

        serverPanel_Layout.setVerticalGroup(
            serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverPanel_Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(portNumLabel_))
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portNumFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipLabel_))
                        .addGap(20, 20, 20)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(durationFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(durationLabel_)
                            .addComponent(remainingLabel_)
                            .addComponent(timerLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openSurveyButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeSurveyButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {durationLabel_, ipLabel_});

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeSurveyButton_, openSurveyButton_});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(serverPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * @param evt 
     */
    private void portNumFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_portNumFTextField_FocusLost
        
        if( portNumFTextField_.getText().equals("") )
            return;
        
        validatePortNumber();
    }//GEN-LAST:event_portNumFTextField_FocusLost

    private void ipFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ipFTextField_FocusLost
        
        if (ipFTextField_.getText().equals(""))
            return;
             
        ipAddressOk_ = validateIP(ipFTextField_.getText().trim()); // Valid IP Address format is 0-255.0-255.0-255.0-255
        
        if (!ipAddressOk_) {
            
            JOptionPane.showMessageDialog(serverPanel_, "Wrong IP Format", "Error", JOptionPane.ERROR_MESSAGE);
            //ipFTextField_.setValue("");
           
        }
        
        
    }//GEN-LAST:event_ipFTextField_FocusLost

    private void durationFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationFTextField_FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_durationFTextField_FocusLost

    private void closeSurveyButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSurveyButton_ActionPerformed
       
        if ( !surveyIsOver_ ) {
           
            stopServer();            
            saveClientsData();
            
            //outputTextArea_.append("Server stopped...\n");  

            /*openSurveyButton_.setEnabled(true);
            portNumFTextField_.setEditable(true);
            ipFTextField_.setEditable(true);
            questionTextArea_.setEditable(true);
            durationFTextField_.setEditable(true);*/
            
            return;
        }
        
        outputTextArea_.setText("");
        outputTextArea_.append("Server is not Running!\n");
        outputTextArea_.append("\n\nNOTE: Server should be restarted completely if you wanna try again :)\n");
        
    }//GEN-LAST:event_closeSurveyButton_ActionPerformed

    private void openSurveyButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSurveyButton_ActionPerformed
        
        int surveyPortNumber = Integer.parseInt(portNumFTextField_.getText().trim());
        int duration = Integer.parseInt(durationFTextField_.getText().trim());
        
        startTimer(duration);
        startServer(surveyPortNumber);
        
        outputTextArea_.append("Waiting for clients to connect...\n");
        openSurveyButton_.setEnabled(false);
        portNumFTextField_.setEditable(false);
        ipFTextField_.setEditable(false);
        questionTextArea_.setEditable(false);
        durationFTextField_.setEditable(false);
        
        
    }//GEN-LAST:event_openSurveyButton_ActionPerformed
 
    /**
     * Start a timer for the survey duration
     * @param duration the survey duration
     */
    private void startTimer(int duration) {
        
        timer_ = new Timer();
        timerCounter_ = duration;
        TimerTask task = new TimerTask() {
           
            @Override
            public void run() {
                
                timerLabel_.setText(Integer.toString(timerCounter_));
                --timerCounter_;
                
                if (timerCounter_ <= -1 ) {                    
                    timer_.cancel();  
                    stopServer();
                }
            }
        };
    
        timer_.scheduleAtFixedRate(task, 0, 1000);
    }
    
    /**
     * Start the Server on a different thread
     */
    private void startServer(int portNumber ) {
        
        
        worker_ = new SwingWorker<Void, Void>() {
        
            @Override
            protected Void doInBackground() throws Exception {
              
                clientsList_ =  new ArrayList<>();
                try {                   
                   
                   server_ = new ServerSocket(portNumber);                   
                                     
                   
                    while (!surveyIsOver_ && !isCancelled() ) {                        
                        
                        Socket socket = server_.accept();
                        
                        if(surveyIsOver_)
                            return null;
                        
                        //outputTextArea_.append("Client " + socket.getRemoteSocketAddress().toString() + " is connected.\n"); // this is fishy; should not update GUI here
                       
                        SurveyService service = new SurveyService(socket);
                        Thread t = new Thread(service);
                        t.start();
                    }

                } catch (IOException ex) {
            
                    outputTextArea_.append("Error making a connection. \n"); 
                    Logger.getLogger(SurveyServer.class.getName()).log(Level.SEVERE, null, ex);                    
                }
                
                return null;
            }

            @Override
            protected void done() {
               
                outputTextArea_.append("End of Survey.\n");
                outputTextArea_.append("Server stopped.\n");
                
                outputTextArea_.append("\n\nNOTE: Server program should be restarted completely if you wanna try again :)\n");
                
                saveClientsData();
               
                /*openSurveyButton_.setEnabled(true);
                portNumFTextField_.setEditable(true);
                ipFTextField_.setEditable(true);
                questionTextArea_.setEditable(true);
                durationFTextField_.setEditable(true);*/
            }
            
        };
        
        worker_.execute();
    }
    
    /**
     * Stop the server and stop the timer as well
     */
    private void stopServer() {
        
        surveyIsOver_ = true;
        timer_.cancel();
        worker_.cancel(true);
    }
    
    
    private void saveClientsData() {
        
        try {
                
                FileWriter fileWriter = new FileWriter("clientsData.txt");
                try (Writer out = new BufferedWriter(fileWriter)) {
                
                    for ( String data : clientsList_)
                    out.write(data + "\n");
                }
                
            } catch (IOException e) {
                
                JOptionPane.showMessageDialog(serverPanel_, "Error saving data...");
            }
        
    }

    /**
     * Inner class SurveyService that execute Survey Access Protocol
     * commands from a socket
     */
    private class SurveyService implements Runnable {

        private final Socket socket_;
        private BufferedReader reader_;
        private PrintWriter outWriter_;
        
        /**
         * Construct a service object that processes commands
         * from a socket for a survey
         * @param socket the socket
         * @param survey the survey
         */
        SurveyService(Socket socket) {

            socket_ = socket;
        }

        @Override
        public void run() {

            try {

                InputStreamReader input = new InputStreamReader(socket_.getInputStream());
                reader_ = new BufferedReader(input);
                outWriter_ = new PrintWriter(socket_.getOutputStream(), true); // with autoflush
                doService();

            } catch (IOException e) {

                outputTextArea_.append("Unexpedted Error...\n");
                e.printStackTrace();
                
            }

        }

        // Read from the clients
        private void doService() {

            try {
                
                String answer;
                while ( (answer = reader_.readLine()) != null) {
                    
                    if(surveyIsOver_) {
                        
                        outWriter_.println("Survey is over.");
                        return;
                    }
                    
                    processResponse(answer);
                    
                }
                
            } catch (IOException ex) {
                Logger.getLogger(SurveyServer.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        /**
         * Display message from the client
         * @param answer the client answer
         */
        private void processResponse(String answer) {
            
            
            if (answer.trim().equals("ping")) { /*client will always send a ping on 
                                                first attempt to connect*/ 
                
                // send question to client
                String question = questionTextArea_.getText().trim();
                
                if(question.trim().equals("")) {
                    
                    questionTextArea_.setText("");
                    questionTextArea_.requestFocus();
                    
                } else {
                    
                    try {
                        
                        outWriter_.println(question);
                        
                    } catch (Exception e) {
                        
                         outputTextArea_.append("Message was not sent to ... \n");
                    }
                }
                
            } else {
                
                String response =  socket_.getRemoteSocketAddress().toString().substring(1) + " - " + answer;
            
                outputTextArea_.append(response + "\n");
                clientsList_.add(response);
                                  
                
            }
            
            
            
            
        }
    
    }
    
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SurveyServer().setVisible(true);
        });        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeSurveyButton_;
    private static javax.swing.JFormattedTextField durationFTextField_;
    private javax.swing.JLabel durationLabel_;
    private static javax.swing.JFormattedTextField ipFTextField_;
    private javax.swing.JLabel ipLabel_;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton openSurveyButton_;
    private javax.swing.JTextArea outputTextArea_;
    private static javax.swing.JFormattedTextField portNumFTextField_;
    private javax.swing.JLabel portNumLabel_;
    private static javax.swing.JTextArea questionTextArea_;
    private javax.swing.JLabel remainingLabel_;
    private javax.swing.JPanel serverPanel_;
    private static javax.swing.JLabel timerLabel_;
    // End of variables declaration//GEN-END:variables

}
