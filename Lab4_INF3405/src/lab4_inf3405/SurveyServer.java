/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab4_inf3405;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;


/**
 *
 * @author Simel
 */
public class SurveyServer extends javax.swing.JFrame {

    private static ServerSocket server_;
    
    private static boolean surveyIsOpen_ = false;
    private static boolean ipAddressOk_ = false;    //Valid IP Address format is 0-255.0-255.0-255.0-255
    
    static int portNumber_;
    static String ipAddress_;
    static String duration_;
    
    private NumberFormat durationFormat_;
    private static final String IP_ADDRESS_FORMAT = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." + 
                                                    "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." + 
                                                    "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." + 
                                                    "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$"; 
    private Pattern pattern_;
    private Matcher matcher_;
    
    private List<javax.swing.JFormattedTextField> fieldList_ = new ArrayList<>();
   
    /**
     * Creates new form Client
     * Constructor
     */
    public SurveyServer() {
        setFieldFormat();
        initComponents();
        
        fieldList_.add(ipFTextField_);
        fieldList_.add(portNumFTextField_);
        fieldList_.add(durationFTextField_);
        
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkFieldsFull();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkFieldsFull();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                 checkFieldsFull();
            }
        };
        
        // populate document listener for all fields
        for(javax.swing.JFormattedTextField field : fieldList_)
            field.getDocument().addDocumentListener(documentListener);
        
    }
    
    
    /**
     * Set field format
     */
    private void setFieldFormat() {
        
        durationFormat_ = NumberFormat.getNumberInstance();
    }
    
    /**
     * Validate port number input
     */
    public void validatePortNumber() {
        
        try {
                        
             Object[] options = { "OK", "CANCEL" };
                if ( Integer.parseInt(portNumFTextField_.getText().trim() ) < 10000 || Integer.parseInt(portNumFTextField_.getText().trim() ) > 10050) {
                    JOptionPane.showOptionDialog(serverPanel_, "Port Nnumber Must Be Between 10000 and 10050", "Error",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);                    
                    
                    portNumFTextField_.setValue("");
                }
            }catch (NumberFormatException ex) {
                
                JOptionPane.showMessageDialog(serverPanel_, "Port Number Should Be An Integer", "Error", JOptionPane.ERROR_MESSAGE);
                portNumFTextField_.setValue("");
         
         }
    }
    
    /**
     * Check whether all the field has been filled
     */
    private void checkFieldsFull() {
        
        for(javax.swing.JFormattedTextField field : fieldList_) {
            
            if (field.getText().trim().isEmpty()) {
                openSurveyButton_.setEnabled(false);
                sendButton_.setEnabled(false);
                closeSurveyButton_.setEnabled(false);
                
                return;
            }
        }
        
        openSurveyButton_.setEnabled(true);
        sendButton_.setEnabled(true);
        closeSurveyButton_.setEnabled(true);
    }
    /**
     * Initializes accepted IP format
     */
    public void initializeAcceptedIPFormat() {
         pattern_ = Pattern.compile(IP_ADDRESS_FORMAT);
    }
    
    /**
     * Validate IP address with regular expression
     * @param ip IP address to validate
     * @return true if IP is valid, false otherwise
     */
    public boolean validateIP(String ip) {
        
        matcher_ = pattern_.matcher(ip);
        
        return matcher_.matches();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverPanel_ = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgTextArea_ = new javax.swing.JTextArea();
        ipLabel_ = new javax.swing.JLabel();
        durationLabel_ = new javax.swing.JLabel();
        sendButton_ = new javax.swing.JButton();
        openSurveyButton_ = new javax.swing.JButton();
        portNumLabel_ = new javax.swing.JLabel();
        closeSurveyButton_ = new javax.swing.JButton();
        remainingLabel_ = new javax.swing.JLabel();
        remOutputLabel_ = new javax.swing.JLabel();
        portNumFTextField_ = new javax.swing.JFormattedTextField();
        ipFTextField_ = new javax.swing.JFormattedTextField();
        durationFTextField_ = new javax.swing.JFormattedTextField(durationFormat_);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverPanel_.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));
        serverPanel_.setName("Server"); // NOI18N

        msgTextArea_.setColumns(20);
        msgTextArea_.setRows(5);
        msgTextArea_.setName("QuestionTextArea"); // NOI18N
        jScrollPane1.setViewportView(msgTextArea_);

        ipLabel_.setText("IP Address:");

        durationLabel_.setText("Duration:");

        sendButton_.setText("SEND");
        sendButton_.setEnabled(false);

        openSurveyButton_.setText("OPEN SURVEY");
        openSurveyButton_.setEnabled(false);
        openSurveyButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSurveyButton_ActionPerformed(evt);
            }
        });

        portNumLabel_.setText("Port Number:");

        closeSurveyButton_.setText("CLOSE SURVEY");
        closeSurveyButton_.setEnabled(false);
        closeSurveyButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSurveyButton_ActionPerformed(evt);
            }
        });

        remainingLabel_.setText("Remaining:");

        remOutputLabel_.setText("jLabel4");
        remOutputLabel_.setMinimumSize(new java.awt.Dimension(104, 24));
        remOutputLabel_.setPreferredSize(new java.awt.Dimension(104, 24));

        portNumFTextField_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        portNumFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        portNumFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        portNumFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                portNumFTextField_FocusLost(evt);
            }
        });

        ipFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        ipFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        ipFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ipFTextField_FocusLost(evt);
            }
        });

        durationFTextField_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        durationFTextField_.setMinimumSize(new java.awt.Dimension(104, 24));
        durationFTextField_.setPreferredSize(new java.awt.Dimension(104, 24));
        durationFTextField_.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                durationFTextField_FocusLost(evt);
            }
        });

        javax.swing.GroupLayout serverPanel_Layout = new javax.swing.GroupLayout(serverPanel_);
        serverPanel_.setLayout(serverPanel_Layout);
        serverPanel_Layout.setHorizontalGroup(
            serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanel_Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addComponent(openSurveyButton_)
                        .addGap(18, 18, 18)
                        .addComponent(sendButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeSurveyButton_))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverPanel_Layout.createSequentialGroup()
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addComponent(ipLabel_)
                                .addGap(18, 18, 18)
                                .addComponent(ipFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(serverPanel_Layout.createSequentialGroup()
                                .addComponent(durationLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(durationFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remainingLabel_)
                            .addComponent(portNumLabel_))
                        .addGap(18, 18, 18)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remOutputLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portNumFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeSurveyButton_, openSurveyButton_});

        serverPanel_Layout.setVerticalGroup(
            serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanel_Layout.createSequentialGroup()
                .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portNumFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipLabel_))
                        .addGap(20, 20, 20)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(durationFTextField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(durationLabel_)
                            .addComponent(remainingLabel_)
                            .addComponent(remOutputLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closeSurveyButton_)
                            .addGroup(serverPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(openSurveyButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sendButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(serverPanel_Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(portNumLabel_)))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {durationLabel_, ipLabel_});

        serverPanel_Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeSurveyButton_, openSurveyButton_, sendButton_});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverPanel_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverPanel_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * @param evt 
     */
    private void portNumFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_portNumFTextField_FocusLost
        
        if( portNumFTextField_.getText().equals("") )
            return;
        
        validatePortNumber();
    }//GEN-LAST:event_portNumFTextField_FocusLost

    private void ipFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ipFTextField_FocusLost
        
        if (ipFTextField_.getText().equals(""))
            return;
        
        initializeAcceptedIPFormat();       
        ipAddressOk_ = validateIP(ipFTextField_.getText().trim()); // Valid IP Address format is 0-255.0-255.0-255.0-255
        
        if (!ipAddressOk_) {
            
            JOptionPane.showMessageDialog(serverPanel_, "Wrong IP Format", "Error", JOptionPane.ERROR_MESSAGE);
            //ipFTextField_.setValue("");
           
        }
        
        
    }//GEN-LAST:event_ipFTextField_FocusLost

    private void durationFTextField_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationFTextField_FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_durationFTextField_FocusLost

    private void closeSurveyButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSurveyButton_ActionPerformed
        
        surveyIsOpen_= false;
    }//GEN-LAST:event_closeSurveyButton_ActionPerformed

    private void openSurveyButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSurveyButton_ActionPerformed
        
        portNumber_ = Integer.parseInt(portNumFTextField_.getText().trim());
        
        try {
           
            server_ = new ServerSocket(portNumber_);
            surveyIsOpen_ = true;
            openSurveyButton_.setEnabled(false);
        
        } catch (IOException ex) {
            Logger.getLogger(SurveyServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openSurveyButton_ActionPerformed
    

    
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SurveyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SurveyServer().setVisible(true);
        });        
        
        
        if (surveyIsOpen_) {
            
            Survey survey = new Survey();
            
            System.out.println("Waiting for clients to connect..."); // must acctually appear in the GUI output
            
            while (surveyIsOpen_) {
                
                try( Socket socket = server_.accept() ) {
                    
                    System.out.println("Client connected."); // must be shown in the GUI
                    SurveyService service = new SurveyService(socket, survey);
                    Thread t = new Thread(service);
                    t.start();
                    
                } //catch (Exception e) {}               
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeSurveyButton_;
    private static javax.swing.JFormattedTextField durationFTextField_;
    private javax.swing.JLabel durationLabel_;
    private static javax.swing.JFormattedTextField ipFTextField_;
    private javax.swing.JLabel ipLabel_;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msgTextArea_;
    private javax.swing.JButton openSurveyButton_;
    private static javax.swing.JFormattedTextField portNumFTextField_;
    private javax.swing.JLabel portNumLabel_;
    private static javax.swing.JLabel remOutputLabel_;
    private javax.swing.JLabel remainingLabel_;
    private javax.swing.JButton sendButton_;
    private static javax.swing.JPanel serverPanel_;
    // End of variables declaration//GEN-END:variables

}
